cmake_minimum_required(VERSION 3.5)

# Set extension name here
set(TARGET_NAME flockmtl)

set(EXTENSION_NAME ${TARGET_NAME}_extension)
set(LOADABLE_EXTENSION_NAME ${TARGET_NAME}_loadable_extension)

project(${TARGET_NAME})

# Include directories
include_directories(src/include)
add_subdirectory(src)

# Find dependencies
find_package(CURL REQUIRED)
find_package(nlohmann_json CONFIG REQUIRED)

# Build the DuckDB static and loadable extensions
build_static_extension(${TARGET_NAME} ${EXTENSION_SOURCES})
build_loadable_extension(${TARGET_NAME} " " ${EXTENSION_SOURCES})

# Check if we're in debug mode and enable AddressSanitizer
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  message(STATUS "Enabling AddressSanitizer for Debug build")
  # Enable AddressSanitizer
  target_compile_options(${EXTENSION_NAME} PRIVATE -fsanitize=address
                                                   -fno-omit-frame-pointer)
  target_link_options(${EXTENSION_NAME} PRIVATE -fsanitize=address)

  target_compile_options(${LOADABLE_EXTENSION_NAME}
                         PRIVATE -fsanitize=address -fno-omit-frame-pointer)
  target_link_options(${LOADABLE_EXTENSION_NAME} PRIVATE -fsanitize=address)
endif()

# Link libraries for the static extension
target_link_libraries(${EXTENSION_NAME} CURL::libcurl
                      nlohmann_json::nlohmann_json)

# Link libraries for the loadable extension
target_link_libraries(${LOADABLE_EXTENSION_NAME} CURL::libcurl
                      nlohmann_json::nlohmann_json)

# Install the extension
install(
  TARGETS ${EXTENSION_NAME}
  EXPORT "${DUCKDB_EXPORT_SET}"
  LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}")
